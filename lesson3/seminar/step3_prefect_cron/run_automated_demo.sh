#!/bin/bash

echo "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Prefect cron –ø–∞–π–ø–ª–∞–π–Ω–∞..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Prefect
if curl -s http://localhost:4200 > /dev/null 2>&1; then
    echo "‚úÖ Prefect UI –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:4200"
else
    echo "‚ùå Prefect UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:4200"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run prefect server start --host 0.0.0.0"
    PREFECT_MISSING=true
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MLflow
if curl -s http://localhost:5000/health > /dev/null 2>&1; then
    echo "‚úÖ MLflow UI –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5000"
else
    echo "‚ùå MLflow UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5000"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: poetry run mlflow ui --host 0.0.0.0 --port 5000"
    MLFLOW_MISSING=true
fi

if [ "$PREFECT_MISSING" = true ] || [ "$MLFLOW_MISSING" = true ]; then
    echo ""
    echo "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é?"
    echo "   (–ü–∞–π–ø–ª–∞–π–Ω—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo ""
echo "ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞..."

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
if [ -f "batch_state.json" ]; then
    echo ""
    echo "üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ batch_state.json:"
    cat batch_state.json | head -20
    echo ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º next_batch
    NEXT_BATCH=$(python3 -c "import json; data=json.load(open('batch_state.json')); print(data.get('next_batch', 1))" 2>/dev/null || echo "1")
    echo "‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $NEXT_BATCH"
else
    echo "üìã batch_state.json –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    NEXT_BATCH=1
fi

echo ""
echo "üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
echo "(–ü–∞–π–ø–ª–∞–π–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω
poetry run python flows/automated_training_flow.py

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"

    echo ""
    echo "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if [ -f "batch_state.json" ]; then
        NEW_NEXT_BATCH=$(python3 -c "import json; data=json.load(open('batch_state.json')); print(data.get('next_batch', 1))" 2>/dev/null || echo "?")
        echo "   üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á $NEW_NEXT_BATCH"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á
        PROCESSED_BATCH=$(python3 -c "import json; data=json.load(open('batch_state.json')); batches=data.get('processed_batches', []); print(batches[-1]['batch_number'] if batches else 0)" 2>/dev/null || echo "?")
        if [ "$PROCESSED_BATCH" != "?" ] && [ "$PROCESSED_BATCH" != "0" ]; then
            echo "   üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á: $PROCESSED_BATCH"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if [ -f "metrics/test_metrics_v$PROCESSED_BATCH.json" ]; then
                ACCURACY=$(python3 -c "import json; data=json.load(open('metrics/test_metrics_v$PROCESSED_BATCH.json')); print(f'{data[\"test_accuracy\"]:.4f}')" 2>/dev/null || echo "?")
                F1_SCORE=$(python3 -c "import json; data=json.load(open('metrics/test_metrics_v$PROCESSED_BATCH.json')); print(f'{data[\"test_f1_score\"]:.4f}')" 2>/dev/null || echo "?")
                echo "   üìà –ú–µ—Ç—Ä–∏–∫–∏: —Ç–æ—á–Ω–æ—Å—Ç—å=$ACCURACY, F1-score=$F1_SCORE"
            fi
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    echo ""
    echo "üìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"

    MODEL_COUNT=$(ls models/*.pkl 2>/dev/null | wc -l)
    echo "   - ü§ñ –ú–æ–¥–µ–ª–µ–π: $MODEL_COUNT"

    METRICS_COUNT=$(ls metrics/test_metrics_*.json 2>/dev/null | wc -l)
    echo "   - üìä –§–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫: $METRICS_COUNT"

    DATA_COUNT=$(ls data/processed/dataset_processed_*.csv 2>/dev/null | wc -l)
    echo "   - üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: $DATA_COUNT"

    echo ""
    echo "üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "   - Prefect UI: http://localhost:4200"
    echo "   - MLflow UI: http://localhost:5000"

    echo ""
    echo "‚è∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:"
    echo "   - Cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (*/2 * * * *)"
    echo "   - –î–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ worker:"
    echo "     poetry run prefect worker start --pool default-process-pool"
    echo "   - –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã!"

    echo ""
    echo "üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo "   –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (–µ—Å–ª–∏ worker –∑–∞–ø—É—â–µ–Ω)"

else
    echo ""
    echo "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    exit 1
fi
